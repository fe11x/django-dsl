from unittest import TestCase, main
from lexer import build_lexer
from exceptions import CompileException


class TestLexer(TestCase):
    def setUp(self):
        global lexer
        lexer = build_lexer()

    def test_1(self):
        lexer.input("key:value")
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key:value")
        self.assertEqual(tok.lexpos, 0)
        self.assertEqual(tok.lineno, 1)

    def test_1_1(self):
        lexer.input("key:2")
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key:2")
        self.assertEqual(tok.lexpos, 0)
        self.assertEqual(tok.lineno, 1)

    def test_1_2(self):
        lexer.input("key<2")
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key<2")
        self.assertEqual(tok.lexpos, 0)
        self.assertEqual(tok.lineno, 1)

    def test_1_3(self):
        lexer.input("key>2")
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key>2")
        self.assertEqual(tok.lexpos, 0)
        self.assertEqual(tok.lineno, 1)

    def test_2(self):
        lexer.input("key:value and key1:value1 or key2:value2")
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key:value")
        self.assertEqual(tok.lexpos, 0)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "AND")
        self.assertEqual(tok.value, "and")
        self.assertEqual(tok.lexpos, 10)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key1:value1")
        self.assertEqual(tok.lexpos, 14)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "OR")
        self.assertEqual(tok.value, "or")
        self.assertEqual(tok.lexpos, 26)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key2:value2")
        self.assertEqual(tok.lexpos, 29)
        self.assertEqual(tok.lineno, 1)

    def test_3(self):
        lexer.input("(key:value and key1:value1) or not key2:value2 ")
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "LPAREN")
        self.assertEqual(tok.value, "(")
        self.assertEqual(tok.lexpos, 0)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key:value")
        self.assertEqual(tok.lexpos, 1)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "AND")
        self.assertEqual(tok.value, "and")
        self.assertEqual(tok.lexpos, 11)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key1:value1")
        self.assertEqual(tok.lexpos, 15)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "RPAREN")
        self.assertEqual(tok.value, ")")
        self.assertEqual(tok.lexpos, 26)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "OR")
        self.assertEqual(tok.value, "or")
        self.assertEqual(tok.lexpos, 28)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "NOT")
        self.assertEqual(tok.value, "not")
        self.assertEqual(tok.lexpos, 31)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key2:value2")
        self.assertEqual(tok.lexpos, 35)
        self.assertEqual(tok.lineno, 1)

    def test_fail_1(self):
        lexer.input("key1or:vandlue1 ort key2 ")
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key1or:vandlue1")
        self.assertEqual(tok.lexpos, 0)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "OR")
        self.assertEqual(tok.value, "or")
        self.assertEqual(tok.lexpos, 16)
        self.assertEqual(tok.lineno, 1)

        with self.assertRaises(CompileException):
            lexer.token()

    def test_fail_2(self):
        lexer.input("key1or:vandlue1 or key2")
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key1or:vandlue1")
        self.assertEqual(tok.lexpos, 0)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "OR")
        self.assertEqual(tok.value, "or")
        self.assertEqual(tok.lexpos, 16)
        self.assertEqual(tok.lineno, 1)

        with self.assertRaises(CompileException):
            lexer.token()

    def test_fail_3(self):
        lexer.input("key1or:vandlue1 or key2:")
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key1or:vandlue1")
        self.assertEqual(tok.lexpos, 0)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "OR")
        self.assertEqual(tok.value, "or")
        self.assertEqual(tok.lexpos, 16)
        self.assertEqual(tok.lineno, 1)

        with self.assertRaises(CompileException):
            lexer.token()

    def test_fail_4(self):
        lexer.input("key1or:vandlue1 or :key2")
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "FIELD")
        self.assertEqual(tok.value, "key1or:vandlue1")
        self.assertEqual(tok.lexpos, 0)
        self.assertEqual(tok.lineno, 1)
        tok = lexer.token()
        # print(tok.type, tok.value, tok.lexpos)
        self.assertEqual(tok.type, "OR")
        self.assertEqual(tok.value, "or")
        self.assertEqual(tok.lexpos, 16)
        self.assertEqual(tok.lineno, 1)

        with self.assertRaises(CompileException):
            lexer.token()


if __name__ == '__main__':
    main()
